<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrls="clr-namespace:DevComponents.WPF.Controls;assembly=DevComponents.WPF.Controls"
                    xmlns:m="clr-namespace:DevComponents.WPF.Metro">

    <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <ctrls:ThicknessToThicknessConverter x:Key="ThicknessToThicknessConverter" />
    
    <Style TargetType="m:MetroTabItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="10,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="m:MetroTabItem">
                    <Grid Name="MainGrid">
                        <Border Name="HighlightBorder" Opacity="0" BorderThickness="0,0,0,2" BorderBrush="{DynamicResource {x:Static m:MetroColors.BaseBrushKey}}" />
                        <ContentPresenter Name="Header" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" 
                                          TextElement.FontWeight="Bold" TextElement.FontFamily="Segoe UI" TextElement.FontSize="14" 
                                          TextElement.Foreground="{DynamicResource {x:Static m:MetroColors.TextInactiveBrushKey}}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="HighlightBorder" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource {x:Static m:MetroColors.BaseBrushKey}}" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="HighlightBorder" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BackstageButtonStyle" TargetType="ToggleButton">
        <Setter Property="Padding" Value="5,2" />
        <Setter Property="MinWidth" Value="58" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static m:MetroColors.BaseTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <!-- Normal Border -->
                        <Border BorderThickness="1" CornerRadius="0,2,2,0" BorderBrush="{DynamicResource {x:Static m:MetroColors.BaseDarkBrushKey}}">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Color="{DynamicResource {x:Static m:MetroColors.BaseDarkColorKey}}" Offset="0" />
                                    <GradientStop Color="{DynamicResource {x:Static m:MetroColors.BaseColorKey}}" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border CornerRadius="0,2,2,0" BorderBrush="#50FFFFFF" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="Transparent" Offset="0.5" />
                                        <GradientStop Color="#20FFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Border>
                        <!-- Hover Border -->
                        <Border Name="HoverBorder" Opacity="0" CornerRadius="0,2,2,0" BorderThickness="1" Background="{DynamicResource {x:Static m:MetroColors.BaseBrushKey}}"
                                BorderBrush="{DynamicResource {x:Static m:MetroColors.BaseDarkBrushKey}}">
                            <Border CornerRadius="0,2,2,0" BorderThickness="1">
                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#40FFFFFF" Offset="0" />
                                        <GradientStop Color="#55FFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="Transparent" Offset="0.5" />
                                        <GradientStop Color="#23FFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Border>
                        <!-- Pressed Border -->
                        <Border Name="PressedBorder" Opacity="0" CornerRadius="0,2,2,0" BorderThickness="1" Background="{DynamicResource {x:Static m:MetroColors.BaseDarkBrushKey}}"
                                BorderBrush="{DynamicResource {x:Static m:MetroColors.BaseDarkerBrushKey}}">
                            <Border CornerRadius="0,2,2,0" BorderThickness="1">
                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#50FFFFFF" Offset="0" />
                                        <GradientStop Color="#60FFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="Transparent" Offset="0.5" />
                                        <GradientStop Color="#33FFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Border>

                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="HoverBorder" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="PressedBorder" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="m:MetroShell">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Background" Value="{DynamicResource {x:Static m:MetroColors.CanvasBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static m:MetroColors.TextBrushKey}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <m:MetroTabPanel>
                        <m:MetroTabPanel.ShiftRightButton>
                            <Button Visibility="Collapsed" FontFamily="Symbol" FontSize="12" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="5,0,5,1" Content="&lt;" />
                        </m:MetroTabPanel.ShiftRightButton>
                        <m:MetroTabPanel.ShiftLeftButton>
                            <Button Visibility="Collapsed" FontFamily="Symbol" FontSize="12" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="5,0,5,1" Content="&gt;" />
                        </m:MetroTabPanel.ShiftLeftButton>
                    </m:MetroTabPanel>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="m:MetroShell">
                    <Grid Name="MainGrid" Background="{TemplateBinding Background}" >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ContentPresenter Grid.ColumnSpan="2" Content="{TemplateBinding Chrome}" />
                        <ctrls:Rectangle2D3D Name="ThreeDRectangle" Grid.Row="1" />
                        <Grid Name="AppView" Grid.Row="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ToggleButton Name="BackstageButton" Grid.Row="0" Margin="0,0,2,0" Style="{StaticResource BackstageButtonStyle}" Content="{TemplateBinding BackstageButtonContent}" 
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowBackstageButton, Converter={StaticResource BoolToVisibilityConverter}}"
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsBackstageOpen, Mode=TwoWay}"/>
                            <ItemsPresenter Name="ItemsHost" Grid.Row="0" Grid.Column="1"
                                            Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding, Converter={StaticResource ThicknessToThicknessConverter}, ConverterParameter=Right}" />
                            <ContentPresenter Name="PART_SelectedContentHost" Grid.Row="1" Grid.ColumnSpan="2"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" Content="{TemplateBinding SelectedContent}"
                                              ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" />
                            <ContentPresenter Grid.Row="2" Grid.ColumnSpan="2" Content="{TemplateBinding StatusBar}"
                                          Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowStatusBar, Converter={StaticResource BoolToVisibilityConverter}}" />

                            <Grid Name="PopupPlacementGrid" Grid.Row="1" Grid.RowSpan="2" Grid.ColumnSpan="2">
                                <Popup Name="Popup" AllowsTransparency="True" StaysOpen="False" Placement="Relative"
                                       ctrls:PopupBehavior.ToggleButton="{Binding ElementName=BackstageButton}">
                                    <Border Width="{Binding ElementName=PopupPlacementGrid, Path=ActualWidth}" Height="{Binding ElementName=PopupPlacementGrid, Path=ActualHeight}">
                                        <ContentPresenter Content="{TemplateBinding Backstage}" />
                                    </Border>
                                </Popup>
                            </Grid>
                        </Grid>
                        <ContentPresenter Grid.Row="1" Grid.RowSpan="2" Margin="0,-1,0,0" Content="{TemplateBinding Start}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="StartControlDockStates">
                                <VisualState Name="StartDocked" />
                                <VisualState Name="StartUndocked">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="BackstageButton" Storyboard.TargetProperty="IsEnabled">
                                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                        </BooleanAnimationUsingKeyFrames>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="IsEnabled">
                                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                        </BooleanAnimationUsingKeyFrames>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_SelectedContentHost" Storyboard.TargetProperty="IsEnabled">
                                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                        </BooleanAnimationUsingKeyFrames>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PopupPlacementGrid" Storyboard.TargetProperty="IsEnabled">
                                            <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Backstage" Value="{x:Null}">
                            <Setter TargetName="BackstageButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>