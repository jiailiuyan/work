<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:m="clr-namespace:DevComponents.WPF.Metro"
                    xmlns:ctrls="clr-namespace:DevComponents.WPF.Controls;assembly=DevComponents.WPF.Controls">

    <ContextMenu x:Key="{x:Static m:QuickAccessToolBar.RemoveItemContextMenuKey}">
        <MenuItem Command="{x:Static m:QuickAccessToolBar.RemoveFromQATCommand}" 
                  Header="{DynamicResource {x:Static m:MetroStrings.RemoveFromQATCommandStringKey}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}" />
        <Separator />
        <MenuItem Command="{x:Static m:QuickAccessToolBar.CustomizeQATCommand}" 
                  Header="{DynamicResource {x:Static m:MetroStrings.CustomizeQATCommandStringKey}}" />
    </ContextMenu>

    <ContextMenu x:Key="{x:Static m:QuickAccessToolBar.AddItemContextMenuKey}">
        <MenuItem Command="{x:Static m:QuickAccessToolBar.AddToQATCommand}" 
                  Header="{DynamicResource {x:Static m:MetroStrings.AddToQATCommandStringKey}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}" />
        <Separator />
        <MenuItem Command="{x:Static m:QuickAccessToolBar.CustomizeQATCommand}" 
                  Header="{DynamicResource {x:Static m:MetroStrings.CustomizeQATCommandStringKey}}" />
    </ContextMenu>


    <Style TargetType="m:QuickAccessToolBar">    
        <Style.Resources>
            <Style TargetType="ctrls:PopupButton">
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="m:QuickAccessToolBar">
                    <ControlTemplate.Resources>
                        <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />
                    </ControlTemplate.Resources>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Separator  Margin="5,0,0,0" Style="{DynamicResource {x:Static ToolBar.SeparatorStyleKey}}" />
                        <ToolBarPanel Name="PART_ToolBarPanel" Grid.Column="1" IsItemsHost="True" HorizontalAlignment="Left" />
                        <ctrls:PopupButton Name="OverflowButton" IsTabStop="False" Grid.Column="2" BorderThickness="0" VerticalAlignment="Center"
                                           Visibility="Hidden" IsHitTestVisible="False" HorizontalPopupAlignment="Left"
                                              IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsOverflowOpen, Mode=TwoWay}">
                            <ctrls:PopupButton.Resources>
                                <ControlTemplate x:Key="{x:Static ctrls:PopupButton.GlyphTemplateKey}">
                                    <Grid>
                                        <Path Margin="0,0,0,0" Fill="{TemplateBinding Foreground}" Data="M 0,0 L 3,2.5 0,5 Z" />
                                        <Path Margin="4,0,0,0" Fill="{TemplateBinding Foreground}" Data="M 0,0 L 3,2.5 0,5 Z" />
                                    </Grid>
                                </ControlTemplate>
                            </ctrls:PopupButton.Resources>
                            <ToolBarOverflowPanel Name="PART_ToolBarOverflowPanel" FocusVisualStyle="{x:Null}" Focusable="True" WrapWidth="200"
                                                  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ctrls:PopupButton>
                        <ctrls:PopupButton Name="CustomizeMenuButton" IsTabStop="False" HorizontalPopupAlignment="Left" VerticalAlignment="Center" CloseOnClick="True" BorderThickness="0" Padding="5,0"
                                              IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsCustomizeMenuOpen, Mode=TwoWay}">
                            <ctrls:PopupButton.Resources>
                                <ControlTemplate x:Key="{x:Static ctrls:PopupButton.GlyphTemplateKey}">
                                    <Border Margin="0,3,0,0" BorderBrush="{TemplateBinding Foreground}" BorderThickness="0,1,0,0">
                                        <Path Margin="1,2" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 0,0 L 2.5,3 5,0 Z" />
                                    </Border>
                                </ControlTemplate>
                            </ctrls:PopupButton.Resources>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Border Padding="6,2" CornerRadius="2,2,0,0">
                                    <TextBlock Text="{DynamicResource {x:Static m:MetroStrings.CustomizeQATMenuHeaderStringKey}}" FontWeight="SemiBold" Foreground="{TemplateBinding Foreground}" />
                                </Border>
                                <Menu Grid.Row="1" Background="Transparent" BorderThickness="0"
                                      ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CustomizableItems}">
                                    <Menu.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel />
                                        </ItemsPanelTemplate>
                                    </Menu.ItemsPanel>
                                    <Menu.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Name}" />
                                        </DataTemplate>
                                    </Menu.ItemTemplate>
                                    <Menu.ItemContainerStyle>
                                        <Style TargetType="MenuItem">
                                            <Style.Resources>
                                                <ctrls:VisibilityToBooleanConverter x:Key="visibilityToBoolConverter" />
                                            </Style.Resources>
                                            <Setter Property="IsCheckable" Value="True" />
                                            <Setter Property="IsChecked" Value="{Binding Visibility, Converter={StaticResource visibilityToBoolConverter}}" />
                                            <Setter Property="OverridesDefaultStyle" Value="True" />
                                            <Setter Property="Padding" Value="8,3" />
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static m:MetroColors.TextBrushKey}}" />
                                            <Setter Property="Template" Value="{DynamicResource {x:Static m:CommonControlsResources.MenuItemTemplateKey}}" />
                                        </Style>
                                    </Menu.ItemContainerStyle>
                                </Menu>
                            </Grid>
                        </ctrls:PopupButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasOverflowItems" Value="True">
                            <Setter TargetName="OverflowButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="OverflowButton" Property="IsHitTestVisible" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>